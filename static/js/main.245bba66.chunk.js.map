{"version":3,"sources":["api/getDataApi.js","reducers/inizializedReducer.js","constants.js","reducers/postsReducer.js","reducers/loadingReducer.js","reducers/ErrorReducer.js","reducers/queryReducer.js","store.js","components/User.js","components/CommentItem.js","components/CommentList.js","components/Post.js","components/PostList.js","App.js","index.js"],"names":["getData","URL","fetch","then","response","json","initializedReducer","isInitialized","arguments","length","undefined","action","type","value","setPosts","posts","payload","postsReducer","filter","post","id","map","postId","Object","objectSpread2","comments","comment","commentId","setLoading","loadingReducer","isLoading","setError","errorReducer","hasError","queryReducer","query","getLoading","state","getError","getInitialized","getSearchPosts","title","body","toLowerCase","includes","getPostsWithUsersAndComments","listOfPosts","listOfUsers","listOfComments","user","find","userId","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","User","_ref","name","email","react_default","a","createElement","className","connect","data","deleteComment","onClick","CommentList","currentComment","components_CommentItem","key","deletePost","concat","components_User","components_CommentList","Fragment","currentPost","components_Post","mapDispatchToProps","setQuery","getPostsFromServer","dispatch","_ref2","users","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","slicedToArray","t0","stop","lib","debounceTimeout","placeholder","onChange","target","trim","components_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"mPAIMA,EAAU,SAAAC,GAAG,OAAIC,MAAMD,GAC1BE,KAAK,SAAAC,GAAQ,OAAIA,EAASC,UCUdC,EARY,WAAmC,IAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC5D,MCR6B,oBDQzBC,EAAOC,KACFD,EAAOE,MAGTN,GEVIO,EAAW,SAAAC,GAAK,MAAK,CAChCH,KDAuB,YCCvBI,QAASD,IAoCIE,EAtBM,WAAwB,IAAvBF,EAAuBP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,OAAQC,EAAOC,MACb,IDjBqB,YCkBnB,OAAOD,EAAOK,QAEhB,IDnBuB,cCoBrB,OAAOD,EAAMG,OAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOT,EAAOK,UAEjD,IDrB0B,iBCsBxB,OAAOD,EAAMM,IAAI,SAAAF,GAAI,OAAKA,EAAKC,KAAOT,EAAOW,OAAnBC,OAAAC,EAAA,EAAAD,CAAA,GAEnBJ,EAFmB,CAGtBM,SAAUN,EAAKM,SACZP,OAAO,SAAAQ,GAAO,OAAIA,EAAQN,KAAOT,EAAOgB,cAE3CR,IAEN,QACE,OAAOJ,IClCAa,EAAa,SAAAf,GAAK,MAAK,CAClCD,KFFyB,cEGzBC,UAWagB,EARQ,WAA+B,IAA9BC,EAA8BtB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,MFPyB,gBEOrBC,EAAOC,KACFD,EAAOE,MAGTiB,GCVIC,EAAW,SAAAlB,GAAK,MAAK,CAChCD,KHDuB,YGEvBC,UAWamB,EARM,WAA8B,IAA7BC,EAA6BzB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAXG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACjD,MHNuB,cGMnBC,EAAOC,KACFD,EAAOE,MAGToB,GCGMC,EARM,WAAwB,IAAvBC,EAAuB3B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAf,GAAIG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,MJFuB,cIEnBC,EAAOC,KACFD,EAAOwB,MAGTA,GCHIC,EAAa,SAAAC,GAAK,OAAIA,EAAMP,WAC5BQ,EAAW,SAAAD,GAAK,OAAIA,EAAMJ,UAC1BM,EAAiB,SAAAF,GAAK,OAAIA,EAAM9B,eAEhCiC,EAAiB,SAAAH,GAAK,OAAIA,EAAMtB,MAC1CG,OAAO,SAAAC,GAAI,OAAKA,EAAKsB,MAAQtB,EAAKuB,MAAMC,cAAcC,SAASP,EAAMF,UAElEU,EAA+B,SACnCC,EAAaC,EAAaC,GADS,OAGnCF,EAAYzB,IAAI,SAAAF,GAAI,OAAAI,OAAAC,EAAA,EAAAD,CAAA,GACfJ,EADe,CAElB8B,KAAMF,EAAYG,KAAK,SAAAD,GAAI,OAAIA,EAAK7B,KAAOD,EAAKgC,SAChD1B,SAAUuB,EAAe9B,OAAO,SAAAQ,GAAO,OAAIA,EAAQJ,SAAWH,EAAKC,UA0BjEgC,EAAcC,YAAgB,CAClCtC,MAAOE,EACPa,UAAWD,EACXI,SAAUD,EACVzB,cAAeD,EACf6B,MAAOD,IAGIoB,EAAQC,YAAYH,EAAaI,YAAgBC,oBCnC/CC,MAlBf,SAAAC,GAAwB,IAARV,EAAQU,EAARV,KACNW,EAAgBX,EAAhBW,KAAMC,EAAUZ,EAAVY,MAEd,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaL,GAC3BE,EAAAC,EAAAC,cAAA,SAAIH,KC8BKK,cAXS,SAAA7B,GAAK,MAAK,CAChC8B,KAAM9B,EAAM8B,OAU0B,CAAEC,cN3Bb,SAAC9C,EAAQK,GAAT,MAAwB,CACnDf,KDR4B,iBCS5BU,SACAK,eMwBauC,CAlCK,SAAAP,GAAwC,IAArCrC,EAAqCqC,EAArCrC,OAAQI,EAA6BiC,EAA7BjC,QAAS0C,EAAoBT,EAApBS,cAC9BhD,EAA0BM,EAA1BN,GAAIwC,EAAsBlC,EAAtBkC,KAAMlB,EAAgBhB,EAAhBgB,KAAMmB,EAAUnC,EAAVmC,MAExB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAgBL,GAC9BE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBvB,GAC7BoB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,mBACCH,GAEHC,EAAAC,EAAAC,cAAA,UACEK,QAAS,kBAAMD,EAAc9C,EAAQF,IACrC6C,UAAU,iBACVrD,KAAK,UAHP,kBAOAkD,EAAAC,EAAAC,cAAA,cCFSM,EAjBK,SAAAX,GAAA,IAAGrC,EAAHqC,EAAGrC,OAAQG,EAAXkC,EAAWlC,SAAX,OAClBqC,EAAAC,EAAAC,cAAA,WACGvC,EAASJ,IAAI,SAAAkD,GAAc,OAC1BT,EAAAC,EAAAC,cAACQ,EAAD,CACE9C,QAAS6C,EACTjD,OAAQA,EACRmD,IAAKF,EAAenD,SCyCb8C,cAfS,SAAA7B,GAAK,MAAK,CAChC8B,KAAM9B,EAAM8B,OAc0B,CAAEO,WR5ChB,SAAApD,GAAM,MAAK,CACnCV,KDJyB,cCKzBI,QAASM,KQ0CI4C,CA5CF,SAAAP,GAA0B,IAAvBxC,EAAuBwC,EAAvBxC,KAAMuD,EAAiBf,EAAjBe,WACZjC,EAAoCtB,EAApCsB,MAAOC,EAA6BvB,EAA7BuB,KAAMO,EAAuB9B,EAAvB8B,KAAM7B,EAAiBD,EAAjBC,GAAIK,EAAaN,EAAbM,SAE/B,OACEqC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,cACVI,QAAS,kBAAMK,EAAWtD,IAC1BR,KAAK,UAHP,UAOAkD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBAAiBxB,GAC/BqB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAb,IAAAU,OAAgCjC,EAAhC,MACAoB,EAAAC,EAAAC,cAACY,EAAD,CAAM3B,KAAMA,KAEda,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACAH,EAAAC,EAAAC,cAACa,EAAD,CAAapD,SAAUA,EAAUH,OAAQF,UCDtC8C,cARS,SAAA7B,GAAK,MAAK,CAChCtB,MAAOyB,EAAeH,KAOT6B,CArBE,SAAAP,GAAA,IAAG5C,EAAH4C,EAAG5C,MAAH,OACf+C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,kBAEG,IACAlD,EAAMN,QAERM,EAAMM,IAAI,SAAA0D,GAAW,OACpBjB,EAAAC,EAAAC,cAACgB,EAAD,CAAM7D,KAAM4D,EAAaN,IAAKM,EAAY3D,UCuD1C6D,EAAqB,CACzBC,SPpEsB,SAAA/C,GAAK,MAAK,CAChCvB,KJGuB,YIFvBuB,UOmEAgD,mBN7CgC,kBAAM,SAAMC,GAAN,IAAAzB,EAAA0B,EAAAtE,EAAAuE,EAAA7D,EAAA,OAAA8D,EAAAxB,EAAAyB,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACtCP,EAASrD,GAAS,IAClBqD,EAASxD,GAAW,IAFkB6D,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,EAAAxB,EAAA6B,MAKGC,QAAQC,IAAI,CPxBzB9F,EAPb,8CAQaA,EAPb,8CAQgBA,EAPb,oDOwBoB,OAAA2D,EAAA8B,EAAAM,KAAAV,EAAA9D,OAAAyE,EAAA,EAAAzE,CAAAoC,EAAA,GAK7B5C,EAL6BsE,EAAA,GAKtBC,EALsBD,EAAA,GAKf5D,EALe4D,EAAA,GAWpCD,EAAStE,EACP+B,EAA6B9B,EAAOuE,EAAO7D,KAE7C2D,ENtCoC,CACtCxE,KCH6B,kBDI7BC,OMoC0B,IAdY4E,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAgBpCL,EAASrD,GAAS,IAhBkB,QAmBtCqD,EAASxD,GAAW,IAnBkB,yBAAA6D,EAAAS,SAAA,uBMwDzBhC,cAnBS,SAAA7B,GAAK,MAAK,CAChCP,UAAWM,EAAWC,GACtBJ,SAAUK,EAASD,GACnB9B,cAAegC,EAAeF,KAgBQ4C,EAAzBf,CApEH,SAAAP,GACyB,IADtB7B,EACsB6B,EADtB7B,UAAWG,EACW0B,EADX1B,SAAU1B,EACCoD,EADDpD,cAClC2E,EAAmCvB,EAAnCuB,SAAUC,EAAyBxB,EAAzBwB,mBAKV,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACX1D,IAAkBuB,IAAcG,GAChC6B,EAAAC,EAAAC,cAAA,UACEpD,KAAK,SACLqD,UAAU,UACVI,QAASc,GAHX,QASD5E,GACCuD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAe,SAAA,KACEhB,EAAAC,EAAAC,cAACmC,EAAA,cAAD,CACEC,gBAAiB,IACjBxF,KAAK,OACLyF,YAAY,SACZpC,UAAU,SACVqC,SAvByB,SAAAjB,GAAgB,IAAbkB,EAAalB,EAAbkB,OACpCrB,EAASqB,EAAO1F,MAAM8B,cAAc6D,WAwB9B1C,EAAAC,EAAAC,cAACyC,EAAD,OAIHxE,GACC6B,EAAAC,EAAAC,cAAA,UACEC,UAAU,WACVrD,KAAK,SACLyD,QAASc,GAHX,qBASDrD,IAAcG,GACb6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,iBClDRyC,IAASC,OACP7C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUtD,MAAOA,GACfQ,EAAAC,EAAAC,cAAC6C,EAAD,OAEDC,SAASC,eAAe","file":"static/js/main.245bba66.chunk.js","sourcesContent":["const postsURL = 'https://jsonplaceholder.typicode.com/posts';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst commentsURL = 'https://jsonplaceholder.typicode.com/comments';\n\nconst getData = URL => fetch(URL)\n  .then(response => response.json());\n\nexport const getPosts = () => getData(postsURL);\nexport const getUsers = () => getData(usersURL);\nexport const getComments = () => getData(commentsURL);\n","import { SET_INITIALIZED } from '../constants';\n\nexport const setInitialized = value => ({\n  type: SET_INITIALIZED,\n  value,\n});\n\nconst initializedReducer = (isInitialized = false, action) => {\n  if (action.type === SET_INITIALIZED) {\n    return action.value;\n  }\n\n  return isInitialized;\n};\n\nexport default initializedReducer;\n","export const SET_INITIALIZED = 'SET_INITIALIZED';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_POSTS = 'SET_POSTS';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\nexport const SET_QUERY = 'SET_QUERY';\n\n","import { SET_POSTS, DELETE_COMMENT, DELETE_POST } from '../constants';\n\nexport const setPosts = posts => ({\n  type: SET_POSTS,\n  payload: posts,\n});\n\nexport const deletePost = postId => ({\n  type: DELETE_POST,\n  payload: postId,\n});\n\nexport const deleteComment = (postId, commentId) => ({\n  type: DELETE_COMMENT,\n  postId,\n  commentId,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.payload;\n\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.payload);\n\n    case DELETE_COMMENT:\n      return posts.map(post => (post.id === action.postId\n        ? {\n          ...post,\n          comments: post.comments\n            .filter(comment => comment.id !== action.commentId),\n        }\n        : post));\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","import { SET_LOADING } from '../constants';\n\nexport const setLoading = value => ({\n  type: SET_LOADING,\n  value,\n});\n\nconst loadingReducer = (isLoading = false, action) => {\n  if (action.type === SET_LOADING) {\n    return action.value;\n  }\n\n  return isLoading;\n};\n\nexport default loadingReducer;\n","import { SET_ERROR } from '../constants';\n\nexport const setError = value => ({\n  type: SET_ERROR,\n  value,\n});\n\nconst errorReducer = (hasError = false, action) => {\n  if (action.type === SET_ERROR) {\n    return action.value;\n  }\n\n  return hasError;\n};\n\nexport default errorReducer;\n","import { SET_QUERY } from '../constants';\n\nexport const setQuery = query => ({\n  type: SET_QUERY,\n  query,\n});\n\nconst queryReducer = (query = '', action) => {\n  if (action.type === SET_QUERY) {\n    return action.query;\n  }\n\n  return query;\n};\n\nexport default queryReducer;\n","import thunk from 'redux-thunk';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { getPosts, getUsers, getComments } from './api/getDataApi';\nimport initializedReducer, { setInitialized } from './reducers/inizializedReducer';\nimport postsReducer, { setPosts } from './reducers/postsReducer';\nimport loadingReducer, { setLoading } from './reducers/loadingReducer';\nimport errorReducer, { setError } from './reducers/ErrorReducer';\nimport queryReducer from './reducers/queryReducer';\n\nexport const getLoading = state => state.isLoading;\nexport const getError = state => state.hasError;\nexport const getInitialized = state => state.isInitialized;\n\nexport const getSearchPosts = state => state.posts\n  .filter(post => (post.title + post.body).toLowerCase().includes(state.query));\n\nconst getPostsWithUsersAndComments = (\n  listOfPosts, listOfUsers, listOfComments\n) => (\n  listOfPosts.map(post => ({\n    ...post,\n    user: listOfUsers.find(user => user.id === post.userId),\n    comments: listOfComments.filter(comment => comment.postId === post.id),\n  }))\n);\n\nexport const getPostsFromServer = () => async(dispatch) => {\n  dispatch(setError(false));\n  dispatch(setLoading(true));\n\n  try {\n    const [posts, users, comments] = await Promise.all([\n      getPosts(),\n      getUsers(),\n      getComments(),\n    ]);\n\n    dispatch(setPosts(\n      getPostsWithUsersAndComments(posts, users, comments)\n    ));\n    dispatch(setInitialized(true));\n  } catch {\n    dispatch(setError(true));\n  }\n\n  dispatch(setLoading(false));\n};\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoading: loadingReducer,\n  hasError: errorReducer,\n  isInitialized: initializedReducer,\n  query: queryReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const { name, email } = user;\n\n  return (\n    <div>\n      <h3 className=\"user-name\">{name}</h3>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from '../reducers/postsReducer';\n\nconst CommentItem = ({ postId, comment, deleteComment }) => {\n  const { id, name, body, email } = comment;\n\n  return (\n    <div className=\"comment\">\n      <h3 className=\"comment-name\">{name}</h3>\n      <p className=\"comment-body\">{body}</p>\n      <p className=\"comment-email\">\n        <span>By </span>\n        {email}\n      </p>\n      <button\n        onClick={() => deleteComment(postId, id)}\n        className=\"delete-comment\"\n        type=\"button\"\n      >\n        Delete comment\n      </button>\n      <hr />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n});\n\nCommentItem.propTypes\n  = {\n    postId: PropTypes.number.isRequired,\n    comment: PropTypes.oneOfType([PropTypes.object]).isRequired,\n    deleteComment: PropTypes.func.isRequired,\n  };\n\nexport default connect(mapStateToProps, { deleteComment })(CommentItem);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport CommentItem from './CommentItem';\n\nconst CommentList = ({ postId, comments }) => (\n  <div>\n    {comments.map(currentComment => (\n      <CommentItem\n        comment={currentComment}\n        postId={postId}\n        key={currentComment.id}\n      />\n    ))}\n  </div>\n);\n\nCommentList.propTypes = {\n  postId: PropTypes.number.isRequired,\n  comments: PropTypes.oneOfType([PropTypes.array]).isRequired,\n};\n\nexport default CommentList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deletePost } from '../reducers/postsReducer';\nimport User from './User';\nimport CommentList from './CommentList';\n\nconst Post = ({ post, deletePost }) => {\n  const { title, body, user, id, comments } = post;\n\n  return (\n    <div className=\"posts\">\n      <div className=\"flip-container\">\n        <button\n          className=\"delete-post\"\n          onClick={() => deletePost(id)}\n          type=\"button\"\n        >\n          Delete\n        </button>\n        <div className=\"flipper\">\n          <div className=\"front\">\n            <h2 className=\"front-heading\">{title}</h2>\n            <p className=\"front-body\">{ `\"${body}\"`}</p>\n            <User user={user} />\n          </div>\n          <div className=\"back\">\n            <p className=\"back-heading\">Comments:</p>\n            <CommentList comments={comments} postId={id} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  data: state.data,\n});\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired,\n    user: PropTypes.shape({}).isRequired,\n    deletePost: PropTypes.func.isRequired,\n    comments: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  }).isRequired,\n};\n\nexport default connect(mapStateToProps, { deletePost })(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getSearchPosts } from '../store';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <>\n    <h1 className=\"count-posts\">\n      Count of posts:\n      {' '}\n      {posts.length}\n    </h1>\n    {posts.map(currentPost => (\n      <Post post={currentPost} key={currentPost.id} />\n    ))}\n  </>\n);\n\nconst mapStateToProps = state => ({\n  posts: getSearchPosts(state),\n});\n\nPostList.propTypes = {\n  posts: PropTypes.oneOfType([PropTypes.array]).isRequired,\n};\n\nexport default connect(mapStateToProps)(PostList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { DebounceInput } from 'react-debounce-input';\nimport './App.css';\nimport { setQuery } from './reducers/queryReducer';\nimport {\n  getLoading,\n  getError,\n  getInitialized,\n  getPostsFromServer,\n} from './store';\nimport PostList from './components/PostList';\n\nconst App = ({ isLoading, hasError, isInitialized,\n  setQuery, getPostsFromServer }) => {\n  const handleSearchingInputChange = ({ target }) => {\n    setQuery(target.value.toLowerCase().trim());\n  };\n\n  return (\n    <div className=\"App\">\n      {!isInitialized && !isLoading && !hasError && (\n        <button\n          type=\"button\"\n          className=\"btnLoad\"\n          onClick={getPostsFromServer}\n        >\n          Load\n        </button>\n      )}\n\n      {isInitialized && (\n        <>\n          <DebounceInput\n            debounceTimeout={500}\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"search\"\n            onChange={handleSearchingInputChange}\n          />\n          <PostList />\n        </>\n      )}\n\n      {hasError && (\n        <button\n          className=\"btnError\"\n          type=\"button\"\n          onClick={getPostsFromServer}\n        >\n          Error...Try again\n        </button>\n      )}\n\n      {isLoading && !hasError && (\n        <div className=\"hoja\">Loading...</div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n  hasError: getError(state),\n  isInitialized: getInitialized(state),\n});\n\nconst mapDispatchToProps = {\n  setQuery,\n  getPostsFromServer,\n};\n\nApp.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  isInitialized: PropTypes.bool.isRequired,\n  setQuery: PropTypes.func.isRequired,\n  getPostsFromServer: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport App from './App';\n\nReactDOM.render((\n  <Provider store={store}>\n    <App />\n  </Provider>\n), document.getElementById('root'));\n"],"sourceRoot":""}